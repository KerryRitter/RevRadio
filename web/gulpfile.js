/// <reference path="node_modules/systemjs/dist/system.js" />
/// <reference path="node_modules/systemjs/dist/system.js" />
/// <binding ProjectOpened='default' />

var gulp = require("gulp");
var sass = require("gulp-sass");
var ts = require("gulp-typescript");
var minifyCss = require("gulp-minify-css");
var concatCss = require("gulp-concat-css");
var concat = require("gulp-concat");
var minify = require("gulp-minify");
var uglify = require("gulp-uglify");
var rename = require("gulp-rename");
var insert = require("gulp-insert");
var sourcemaps = require("gulp-sourcemaps");
var addsrc = require('gulp-add-src');

// ****CSS***** //

var cssConfig = {
    base: "./Styles",
    input: "./Styles/site.less",
    output: "site",
    watchFolders: [
        "./styles/*.less",
        "./node_modules/bootstrap-less/bootstrap/*.less",
        "./node_modules/bootstrap-less/bootstrap/mixins/*.less"
    ]
};

gulp.task("concat:css", function () {
    // per Gulp author: https://github.com/gulpjs/gulp/issues/505
    console.log("\t\tConcatenating all CSS files to " + cssConfig.output + ".css");
    return gulp.src(cssConfig.input)
        .pipe(less())
        .pipe(insert.prepend("/* generated by gulp build */"))
        .pipe(gulp.dest(cssConfig.base));
});

gulp.task("watch:css", function () {
    gulp.watch(cssConfig.watchFolders, ["concat:css"]);
});

gulp.task("min:css", ["concat:css"], function () {
    var nonMinifiedFilePath = cssConfig.base + "/" + cssConfig.output + ".css";
    var minifiedFileName = cssConfig.output + ".min.css";

    console.log("\t\tMinifying " + nonMinifiedFilePath);
    return gulp.src(nonMinifiedFilePath, { base: cssConfig.base })
        .pipe(minifyCss())
        .pipe(rename(minifiedFileName))
        .pipe(gulp.dest(cssConfig.base));
});

// ****Scripts***** //

var scriptConfig = {
    base: "./Scripts/",
    tsInput: "./Scripts/**/*.ts",
    tsProject: "./Scripts/tsconfig.json",
    libInput: [
        "./node_modules/jquery/dist/jquery.js",
        "./node_modules/bootstrap-less/js/bootstrap.js",
        "./node_modules/lodash/lodash.js",
        "./node_modules/angular/angular.js",
        "./node_modules/angular-ui-bootstrap/dist/ui-bootstrap.js",
        "./node_modules/angular-ui-bootstrap/dist/ui-bootstrap-tpls.js",
        "./node_modules/@angular/router/angular1/angular_1_router.js",
        "./node_modules/systemjs/dist/system.js"
    ],
    libOutput: "lib",
    appOutput: "app"
};

gulp.task("concat:libs", function () {
    return gulp.src(scriptConfig.libInput)
        .pipe(concat(scriptConfig.libOutput + ".js"))
        .pipe(gulp.dest(scriptConfig.base));
});

var tsProject = ts.createProject(scriptConfig.tsProject);
gulp.task("compile:ts", function () {
    return tsProject.src()
	    .pipe(ts(tsProject))
        .js
        .pipe(gulp.dest(scriptConfig.base));
});

gulp.task("min:js", ["concat:libs", "compile:ts"], function () {
    return gulp.src([
            scriptConfig.base + scriptConfig.libOutput + ".js", 
            scriptConfig.base + scriptConfig.appOutput + ".js", 
        ])
        .pipe(uglify())
        .pipe(rename(function(path) {
            path.extname = ".min.js";
        }))
        .pipe(gulp.dest(scriptConfig.base));
});

gulp.task("watch:ts", function () {
    gulp.watch(scriptConfig.tsInput, ["compile:ts"]);
});

// ********* //

gulp.task("default", ["watch:css", "watch:ts"]);
gulp.task("publish", ["min:css", "min:js"]);